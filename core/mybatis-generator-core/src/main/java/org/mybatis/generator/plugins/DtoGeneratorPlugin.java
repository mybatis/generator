/*
 *    Copyright 2006-2025 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
package org.mybatis.generator.plugins;

import java.util.ArrayList;
import java.util.List;

import org.mybatis.generator.api.GeneratedJavaFile;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.PluginAdapter;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.api.dom.java.FullyQualifiedJavaType;
import org.mybatis.generator.api.dom.java.JavaVisibility;
import org.mybatis.generator.api.dom.java.Method;
import org.mybatis.generator.api.dom.java.Parameter;
import org.mybatis.generator.api.dom.java.TopLevelClass;

/**
 * This plugin generates simplified DTO classes from entity classes with Lombok annotations.
 *
 * <p>The plugin creates DTO classes with @Data, @Builder, @AllArgsConstructor, and @NoArgsConstructor
 * annotations, along with conversion methods for converting between entities and DTOs.
 *
 * @author Goody
 */
public class DtoGeneratorPlugin extends PluginAdapter {

    private static final String DTO_SUFFIX = "DTO";
    private static final String DTO_PACKAGE = "dto";

    @Override
    public boolean validate(List<String> warnings) {
        return true;
    }

    @Override
    public List<GeneratedJavaFile> contextGenerateAdditionalJavaFiles(IntrospectedTable introspectedTable) {
        List<GeneratedJavaFile> answer = new ArrayList<>();

        // Generate DTO class
        TopLevelClass dtoClass = generateDtoClass(introspectedTable);
        GeneratedJavaFile dtoJavaFile = new GeneratedJavaFile(dtoClass,
                context.getJavaModelGeneratorConfiguration().getTargetProject(),
                context.getProperty("javaFileEncoding"),
                context.getJavaFormatter());

        answer.add(dtoJavaFile);

        return answer;
    }

    private TopLevelClass generateDtoClass(IntrospectedTable introspectedTable) {
        // Get original entity package and class name
        String entityFullType = introspectedTable.getBaseRecordType();
        String entityPackage = entityFullType.substring(0, entityFullType.lastIndexOf('.'));
        String entityClassName = entityFullType.substring(entityFullType.lastIndexOf('.') + 1);

        // Generate DTO package and class name
        String dtoFullPackage = entityPackage.replace(".entity", "." + DTO_PACKAGE);
        String dtoClassName = entityClassName + DTO_SUFFIX;

        // Create DTO class
        FullyQualifiedJavaType dtoType = new FullyQualifiedJavaType(dtoFullPackage + "." + dtoClassName);
        TopLevelClass dtoClass = new TopLevelClass(dtoType);

        // Set class properties
        dtoClass.setVisibility(JavaVisibility.PUBLIC);

        // Add Lombok annotations
        dtoClass.addAnnotation("@Data");
        dtoClass.addAnnotation("@AllArgsConstructor");
        dtoClass.addAnnotation("@NoArgsConstructor");
        dtoClass.addAnnotation("@Builder");

        // Add Lombok imports
        dtoClass.addImportedType("lombok.Data");
        dtoClass.addImportedType("lombok.AllArgsConstructor");
        dtoClass.addImportedType("lombok.NoArgsConstructor");
        dtoClass.addImportedType("lombok.Builder");

        // Add class comment
        dtoClass.addJavaDocLine("/**");
        dtoClass.addJavaDocLine(" * DTO for " + entityClassName);
        dtoClass.addJavaDocLine(" * Generated by MyBatis Generator DTO Plugin");
        dtoClass.addJavaDocLine(" */");

        // Get all columns (no exclusion)
        List<IntrospectedColumn> allColumns = introspectedTable.getAllColumns();

        // Add fields only (Lombok will generate getters/setters)
        for (IntrospectedColumn column : allColumns) {
            Field field = new Field(column.getJavaProperty(), column.getFullyQualifiedJavaType());
            field.setVisibility(JavaVisibility.PRIVATE);

            if (column.getRemarks() != null && !column.getRemarks().trim().isEmpty()) {
                field.addJavaDocLine("/**");
                field.addJavaDocLine(" * " + column.getRemarks());
                field.addJavaDocLine(" */");
            }

            dtoClass.addField(field);
            dtoClass.addImportedType(column.getFullyQualifiedJavaType());
        }

        // Add conversion methods
        addConversionMethods(dtoClass, introspectedTable, allColumns, entityClassName, dtoClassName);

        return dtoClass;
    }

    private void addConversionMethods(TopLevelClass dtoClass, IntrospectedTable introspectedTable,
                                      List<IntrospectedColumn> allColumns, String entityClassName, String dtoClassName) {

        String entityFullType = introspectedTable.getBaseRecordType();
        FullyQualifiedJavaType entityType = new FullyQualifiedJavaType(entityFullType);
        dtoClass.addImportedType(entityType);

        // Add fromEntity static method
        Method fromEntity = new Method("fromEntity");
        fromEntity.setStatic(true);
        fromEntity.setVisibility(JavaVisibility.PUBLIC);
        fromEntity.setReturnType(new FullyQualifiedJavaType(dtoClass.getType().getShortName()));
        fromEntity.addParameter(new Parameter(entityType, "entity"));

        fromEntity.addBodyLine("if (entity == null) {");
        fromEntity.addBodyLine("return null;");
        fromEntity.addBodyLine("}");
        fromEntity.addBodyLine("");
        fromEntity.addBodyLine("return " + dtoClassName + ".builder()");

        for (IntrospectedColumn column : allColumns) {
            String propertyName = column.getJavaProperty();
            String capitalizedProperty = capitalize(propertyName);
            fromEntity.addBodyLine("    ." + propertyName + "(entity.get" + capitalizedProperty + "())");
        }

        fromEntity.addBodyLine("    .build();");
        dtoClass.addMethod(fromEntity);

        // Add toEntity method
        Method toEntity = new Method("toEntity");
        toEntity.setVisibility(JavaVisibility.PUBLIC);
        toEntity.setReturnType(entityType);

        toEntity.addBodyLine("return new " + entityClassName + "()");

        for (IntrospectedColumn column : allColumns) {
            String propertyName = column.getJavaProperty();
            String capitalizedProperty = capitalize(propertyName);
            toEntity.addBodyLine("    .with" + capitalizedProperty + "(this." + propertyName + ")");
        }

        toEntity.addBodyLine("    ;");
        dtoClass.addMethod(toEntity);
    }

    private String capitalize(String str) {
        if (str == null || str.length() == 0) {
            return str;
        }
        return str.substring(0, 1).toUpperCase() + str.substring(1);
    }
}
